{"version":3,"file":"index.cjs.js","sources":["src/lib/postcss-values-parser.js","src/lib/is-ignored.js","src/lib/get-custom-properties-from-root.js","src/lib/get-custom-properties-from-imports.js","src/lib/transform-value-ast.js","src/lib/transform-properties.js","src/lib/write-custom-properties-to-exports.js","src/index.js"],"sourcesContent":["import valueParser from 'postcss-values-parser';\n\nexport function parse (string) {\n\treturn valueParser(string).parse();\n}\n","function isBlockIgnored(ruleOrDeclaration) {\n\tvar rule = ruleOrDeclaration.selector ?\n\t\truleOrDeclaration : ruleOrDeclaration.parent;\n\n\treturn /(!\\s*)?postcss-custom-properties:\\s*off\\b/i.test(rule.toString())\n}\n\nfunction isRuleIgnored(rule) {\n\tvar previous = rule.prev();\n\n\treturn Boolean(isBlockIgnored(rule) ||\n\t\tprevious &&\n\t\tprevious.type === 'comment' &&\n\t\t/(!\\s*)?postcss-custom-properties:\\s*ignore\\s+next\\b/i.test(previous.text));\n}\n\nexport {\n\tisBlockIgnored,\n\tisRuleIgnored\n}\n","import { parse } from './postcss-values-parser';\nimport { isBlockIgnored } from './is-ignored';\n\n// return custom selectors from the css root, conditionally removing them\nexport default function getCustomPropertiesFromRoot(root, opts) {\n\t// initialize custom selectors\n\tconst customPropertiesFromHtmlElement = {};\n\tconst customPropertiesFromRootPseudo = {};\n\n\t// for each html or :root rule\n\troot.nodes.slice().forEach(rule => {\n\t\tconst customPropertiesObject = isHtmlRule(rule)\n\t\t\t? customPropertiesFromHtmlElement\n\t\t: isRootRule(rule)\n\t\t\t? customPropertiesFromRootPseudo\n\t\t: null;\n\n\t\t// for each custom property\n\t\tif (customPropertiesObject) {\n\t\t\trule.nodes.slice().forEach(decl => {\n\t\t\t\tif (isCustomDecl(decl) && !isBlockIgnored(decl)) {\n\t\t\t\t\tconst { prop } = decl;\n\n\t\t\t\t\t// write the parsed value to the custom property\n\t\t\t\t\tcustomPropertiesObject[prop] = parse(decl.value).nodes;\n\n\t\t\t\t\t// conditionally remove the custom property declaration\n\t\t\t\t\tif (!opts.preserve) {\n\t\t\t\t\t\tdecl.remove();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\n\t\t\t// conditionally remove the empty html or :root rule\n\t\t\tif (!opts.preserve && isEmptyParent(rule) && !isBlockIgnored(rule)) {\n\t\t\t\trule.remove();\n\t\t\t}\n\t\t}\n\t});\n\n\t// return all custom properties, preferring :root properties over html properties\n\treturn { ...customPropertiesFromHtmlElement, ...customPropertiesFromRootPseudo };\n}\n\n// match html and :root rules\nconst htmlSelectorRegExp = /^html$/i;\nconst rootSelectorRegExp = /^:root$/i;\nconst customPropertyRegExp = /^--[A-z][\\w-]*$/;\n\n// whether the node is an html or :root rule\nconst isHtmlRule = node => node.type === 'rule' && htmlSelectorRegExp.test(node.selector) && Object(node.nodes).length;\nconst isRootRule = node => node.type === 'rule' && rootSelectorRegExp.test(node.selector) && Object(node.nodes).length;\n\n// whether the node is an custom property\nconst isCustomDecl = node => node.type === 'decl' && customPropertyRegExp.test(node.prop);\n\n// whether the node is a parent without children\nconst isEmptyParent = node => Object(node.nodes).length === 0;\n","import fs from 'fs';\nimport path from 'path';\nimport postcss from 'postcss';\nimport { parse } from './postcss-values-parser';\nimport getCustomPropertiesFromRoot from './get-custom-properties-from-root';\n\n/* Get Custom Properties from CSS File\n/* ========================================================================== */\n\nasync function getCustomPropertiesFromCSSFile(from) {\n\tconst css = await readFile(from);\n\tconst root = postcss.parse(css, { from });\n\n\treturn getCustomPropertiesFromRoot(root, { preserve: true });\n}\n\n/* Get Custom Properties from Object\n/* ========================================================================== */\n\nfunction getCustomPropertiesFromObject(object) {\n\tconst customProperties = Object.assign(\n\t\t{},\n\t\tObject(object).customProperties,\n\t\tObject(object)['custom-properties']\n\t);\n\n\tfor (const key in customProperties) {\n\t\tcustomProperties[key] = parse(String(customProperties[key])).nodes;\n\t}\n\n\treturn customProperties;\n}\n\n/* Get Custom Properties from JSON file\n/* ========================================================================== */\n\nasync function getCustomPropertiesFromJSONFile(from) {\n\tconst object = await readJSON(from);\n\n\treturn getCustomPropertiesFromObject(object);\n}\n\n/* Get Custom Properties from JS file\n/* ========================================================================== */\n\nasync function getCustomPropertiesFromJSFile(from) {\n\tconst object = await import(from);\n\n\treturn getCustomPropertiesFromObject(object);\n}\n\n/* Get Custom Properties from Imports\n/* ========================================================================== */\n\nexport default function getCustomPropertiesFromImports(sources) {\n\treturn sources.map(source => {\n\t\tif (source instanceof Promise) {\n\t\t\treturn source;\n\t\t} else if (source instanceof Function) {\n\t\t\treturn source();\n\t\t}\n\n\t\t// read the source as an object\n\t\tconst opts = source === Object(source) ? source : { from: String(source) };\n\n\t\t// skip objects with Custom Properties\n\t\tif (opts.customProperties || opts['custom-properties']) {\n\t\t\treturn opts\n\t\t}\n\n\t\t// source pathname\n\t\tconst from = path.resolve(String(opts.from || ''));\n\n\t\t// type of file being read from\n\t\tconst type = (opts.type || path.extname(from).slice(1)).toLowerCase();\n\n\t\treturn { type, from };\n\t}).reduce(async (customProperties, source) => {\n\t\tconst { type, from } = await source;\n\n\t\tif (type === 'css') {\n\t\t\treturn Object.assign(await customProperties, await getCustomPropertiesFromCSSFile(from));\n\t\t}\n\n\t\tif (type === 'js') {\n\t\t\treturn Object.assign(await customProperties, await getCustomPropertiesFromJSFile(from));\n\t\t}\n\n\t\tif (type === 'json') {\n\t\t\treturn Object.assign(await customProperties, await getCustomPropertiesFromJSONFile(from));\n\t\t}\n\n\t\treturn Object.assign(await customProperties, await getCustomPropertiesFromObject(await source));\n\t}, {});\n}\n\n/* Helper utilities\n/* ========================================================================== */\n\nconst readFile = from => new Promise((resolve, reject) => {\n\tfs.readFile(from, 'utf8', (error, result) => {\n\t\tif (error) {\n\t\t\treject(error);\n\t\t} else {\n\t\t\tresolve(result);\n\t\t}\n\t});\n});\n\nconst readJSON = async from => JSON.parse(await readFile(from));\n","export default function transformValueAST(root, customProperties) {\n\tif (root.nodes && root.nodes.length) {\n\t\troot.nodes.slice().forEach(child => {\n\t\t\tif (isVarFunction(child)) {\n\t\t\t\t// eslint-disable-next-line no-unused-vars\n\t\t\t\tconst [propertyNode, comma, ...fallbacks] = child.nodes.slice(1, -1);\n\t\t\t\tconst { value: name } = propertyNode;\n\n\t\t\t\tif (name in Object(customProperties)) {\n\t\t\t\t\t// conditionally replace a known custom property\n\t\t\t\t\tconst nodes = asClonedArrayWithBeforeSpacing(customProperties[name], child.raws.before);\n\n\t\t\t\t\tchild.replaceWith(...nodes);\n\n\t\t\t\t\tretransformValueAST({ nodes }, customProperties, name);\n\t\t\t\t} else if (fallbacks.length) {\n\t\t\t\t\t// conditionally replace a custom property with a fallback\n\t\t\t\t\tconst index = root.nodes.indexOf(child);\n\n\t\t\t\t\tif (index !== -1) {\n\t\t\t\t\t\troot.nodes.splice(index, 1, ...asClonedArrayWithBeforeSpacing(fallbacks, child.raws.before));\n\t\t\t\t\t}\n\n\t\t\t\t\ttransformValueAST(root, customProperties);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\ttransformValueAST(child, customProperties);\n\t\t\t}\n\t\t});\n\t}\n\n\treturn root;\n}\n\n// retransform the current ast without a custom property (to prevent recursion)\nfunction retransformValueAST(root, customProperties, withoutProperty) {\n\tconst nextCustomProperties = Object.assign({}, customProperties);\n\n\tdelete nextCustomProperties[withoutProperty];\n\n\treturn transformValueAST(root, nextCustomProperties);\n}\n\n// match var() functions\nconst varRegExp = /^var$/i;\n\n// whether the node is a var() function\nconst isVarFunction = node => node.type === 'func' && varRegExp.test(node.value) && Object(node.nodes).length > 0;\n\n// return an array with its nodes cloned, preserving the raw\nconst asClonedArrayWithBeforeSpacing = (array, beforeSpacing) => {\n\tconst clonedArray = asClonedArray(array, null);\n\n\tif (clonedArray[0]) {\n\t\tclonedArray[0].raws.before = beforeSpacing;\n\t}\n\n\treturn clonedArray;\n};\n\n// return an array with its nodes cloned\nconst asClonedArray = (array, parent) => array.map(node => asClonedNode(node, parent));\n\n// return a cloned node\nconst asClonedNode = (node, parent) => {\n\tconst cloneNode = new node.constructor(node);\n\n\tfor (const key in node) {\n\t\tif (key === 'parent') {\n\t\t\tcloneNode.parent = parent;\n\t\t} else if (Object(node[key]).constructor === Array) {\n\t\t\tcloneNode[key] = asClonedArray(node.nodes, cloneNode);\n\t\t} else if (Object(node[key]).constructor === Object) {\n\t\t\tcloneNode[key] = Object.assign({}, node[key]);\n\t\t}\n\t}\n\n\treturn cloneNode;\n};\n","import { parse } from './postcss-values-parser';\nimport transformValueAST from './transform-value-ast';\nimport { isRuleIgnored } from './is-ignored';\n\n// transform custom pseudo selectors with custom selectors\nexport default (root, customProperties, opts) => {\n\t// walk decls that can be transformed\n\troot.walkDecls(decl => {\n\t\tif (isTransformableDecl(decl) && !isRuleIgnored(decl)) {\n\t\t\tconst originalValue = decl.value;\n\t\t\tconst valueAST = parse(originalValue);\n\t\t\tconst value = String(transformValueAST(valueAST, customProperties));\n\n\t\t\t// conditionally transform values that have changed\n\t\t\tif (value !== originalValue) {\n\t\t\t\tif (opts.preserve) {\n\t\t\t\t\tdecl.cloneBefore({ value });\n\t\t\t\t} else {\n\t\t\t\t\tdecl.value = value;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t});\n};\n\n// match custom properties\nconst customPropertyRegExp = /^--[A-z][\\w-]*$/;\n\n// match custom property inclusions\nconst customPropertiesRegExp = /(^|[^\\w-])var\\([\\W\\w]+\\)/;\n\n// whether the declaration should be potentially transformed\nconst isTransformableDecl = decl => !customPropertyRegExp.test(decl.prop) && customPropertiesRegExp.test(decl.value);\n","import fs from 'fs';\nimport path from 'path';\n\n/* Write Custom Properties to CSS File\n/* ========================================================================== */\n\nasync function writeCustomPropertiesToCssFile(to, customProperties) {\n\tconst cssContent = Object.keys(customProperties).reduce((cssLines, name) => {\n\t\tcssLines.push(`\\t${name}: ${customProperties[name]};`);\n\n\t\treturn cssLines;\n\t}, []).join('\\n');\n\tconst css = `:root {\\n${cssContent}\\n}\\n`;\n\n\tawait writeFile(to, css);\n}\n\n/* Write Custom Properties to JSON file\n/* ========================================================================== */\n\nasync function writeCustomPropertiesToJsonFile(to, customProperties) {\n\tconst jsonContent = JSON.stringify({\n\t\t'custom-properties': customProperties\n\t}, null, '  ');\n\tconst json = `${jsonContent}\\n`;\n\n\tawait writeFile(to, json);\n}\n\n/* Write Custom Properties to Common JS file\n/* ========================================================================== */\n\nasync function writeCustomPropertiesToCjsFile(to, customProperties) {\n\tconst jsContents = Object.keys(customProperties).reduce((jsLines, name) => {\n\t\tjsLines.push(`\\t\\t'${escapeForJS(name)}': '${escapeForJS(customProperties[name])}'`);\n\n\t\treturn jsLines;\n\t}, []).join(',\\n');\n\tconst js = `module.exports = {\\n\\tcustomProperties: {\\n${jsContents}\\n\\t}\\n};\\n`;\n\n\tawait writeFile(to, js);\n}\n\n/* Write Custom Properties to Module JS file\n/* ========================================================================== */\n\nasync function writeCustomPropertiesToMjsFile(to, customProperties) {\n\tconst mjsContents = Object.keys(customProperties).reduce((mjsLines, name) => {\n\t\tmjsLines.push(`\\t'${escapeForJS(name)}': '${escapeForJS(customProperties[name])}'`);\n\n\t\treturn mjsLines;\n\t}, []).join(',\\n');\n\tconst mjs = `export const customProperties = {\\n${mjsContents}\\n};\\n`;\n\n\tawait writeFile(to, mjs);\n}\n\n/* Write Custom Properties to Exports\n/* ========================================================================== */\n\nexport default function writeCustomPropertiesToExports(customProperties, destinations) {\n\treturn Promise.all(destinations.map(async destination => {\n\t\tif (destination instanceof Function) {\n\t\t\tawait destination(defaultCustomPropertiesToJSON(customProperties));\n\t\t} else {\n\t\t\t// read the destination as an object\n\t\t\tconst opts = destination === Object(destination) ? destination : { to: String(destination) };\n\n\t\t\t// transformer for Custom Properties into a JSON-compatible object\n\t\t\tconst toJSON = opts.toJSON || defaultCustomPropertiesToJSON;\n\n\t\t\tif ('customProperties' in opts) {\n\t\t\t\t// write directly to an object as customProperties\n\t\t\t\topts.customProperties = toJSON(customProperties);\n\t\t\t} else if ('custom-properties' in opts) {\n\t\t\t\t// write directly to an object as custom-properties\n\t\t\t\topts['custom-properties'] = toJSON(customProperties);\n\t\t\t} else {\n\t\t\t\t// destination pathname\n\t\t\t\tconst to = String(opts.to || '');\n\n\t\t\t\t// type of file being written to\n\t\t\t\tconst type = (opts.type || path.extname(opts.to).slice(1)).toLowerCase();\n\n\t\t\t\t// transformed Custom Properties\n\t\t\t\tconst customPropertiesJSON = toJSON(customProperties);\n\n\t\t\t\tif (type === 'css') {\n\t\t\t\t\tawait writeCustomPropertiesToCssFile(to, customPropertiesJSON);\n\t\t\t\t}\n\n\t\t\t\tif (type === 'js') {\n\t\t\t\t\tawait writeCustomPropertiesToCjsFile(to, customPropertiesJSON);\n\t\t\t\t}\n\n\t\t\t\tif (type === 'json') {\n\t\t\t\t\tawait writeCustomPropertiesToJsonFile(to, customPropertiesJSON);\n\t\t\t\t}\n\n\t\t\t\tif (type === 'mjs') {\n\t\t\t\t\tawait writeCustomPropertiesToMjsFile(to, customPropertiesJSON);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}));\n}\n\n/* Helper utilities\n/* ========================================================================== */\n\nconst defaultCustomPropertiesToJSON = customProperties => {\n\treturn Object.keys(customProperties).reduce((customPropertiesJSON, key) => {\n\t\tcustomPropertiesJSON[key] = String(customProperties[key]);\n\n\t\treturn customPropertiesJSON;\n\t}, {});\n};\n\nconst writeFile = (to, text) => new Promise((resolve, reject) => {\n\tfs.writeFile(to, text, error => {\n\t\tif (error) {\n\t\t\treject(error);\n\t\t} else {\n\t\t\tresolve();\n\t\t}\n\t});\n});\n\nconst escapeForJS = string => string.replace(/\\\\([\\s\\S])|(')/g, '\\\\$1$2').replace(/\\n/g, '\\\\n').replace(/\\r/g, '\\\\r');\n","import postcss from 'postcss';\nimport getCustomPropertiesFromRoot from './lib/get-custom-properties-from-root';\nimport getCustomPropertiesFromImports from './lib/get-custom-properties-from-imports';\nimport transformProperties from './lib/transform-properties';\nimport writeCustomPropertiesToExports from './lib/write-custom-properties-to-exports';\n\nexport default postcss.plugin('postcss-custom-properties', opts => {\n\t// whether to preserve custom selectors and rules using them\n\tconst preserve = 'preserve' in Object(opts) ? Boolean(opts.preserve) : true;\n\n\t// sources to import custom selectors from\n\tconst importFrom = [].concat(Object(opts).importFrom || []);\n\n\t// destinations to export custom selectors to\n\tconst exportTo = [].concat(Object(opts).exportTo || []);\n\n\t// promise any custom selectors are imported\n\tconst customPropertiesPromise = getCustomPropertiesFromImports(importFrom);\n\n\t// synchronous transform\n\tconst syncTransform = root => {\n\t\tconst customProperties = getCustomPropertiesFromRoot(root, { preserve });\n\n\t\ttransformProperties(root, customProperties, { preserve });\n\t};\n\n\t// asynchronous transform\n\tconst asyncTransform = async root => {\n\t\tconst customProperties = Object.assign(\n\t\t\t{},\n\t\t\tawait customPropertiesPromise,\n\t\t\tgetCustomPropertiesFromRoot(root, { preserve })\n\t\t);\n\n\t\tawait writeCustomPropertiesToExports(customProperties, exportTo);\n\n\t\ttransformProperties(root, customProperties, { preserve });\n\t};\n\n\t// whether to return synchronous function if no asynchronous operations are requested\n\tconst canReturnSyncFunction = importFrom.length === 0 && exportTo.length === 0;\n\n\treturn canReturnSyncFunction ? syncTransform : asyncTransform;\n});\n"],"names":["parse","string","valueParser","isBlockIgnored","ruleOrDeclaration","rule","selector","parent","test","toString","isRuleIgnored","previous","prev","Boolean","type","text","getCustomPropertiesFromRoot","root","opts","customPropertiesFromHtmlElement","customPropertiesFromRootPseudo","nodes","slice","forEach","customPropertiesObject","isHtmlRule","isRootRule","decl","isCustomDecl","prop","value","preserve","remove","isEmptyParent","htmlSelectorRegExp","rootSelectorRegExp","customPropertyRegExp","node","Object","length","getCustomPropertiesFromCSSFile","from","css","readFile","postcss","getCustomPropertiesFromObject","object","customProperties","assign","key","String","getCustomPropertiesFromJSONFile","readJSON","getCustomPropertiesFromJSFile","getCustomPropertiesFromImports","sources","map","source","Promise","Function","path","resolve","extname","toLowerCase","reduce","reject","fs","error","result","JSON","transformValueAST","child","isVarFunction","propertyNode","comma","fallbacks","name","asClonedArrayWithBeforeSpacing","raws","before","replaceWith","retransformValueAST","index","indexOf","splice","withoutProperty","nextCustomProperties","varRegExp","array","beforeSpacing","clonedArray","asClonedArray","asClonedNode","cloneNode","constructor","Array","walkDecls","isTransformableDecl","originalValue","valueAST","cloneBefore","customPropertiesRegExp","writeCustomPropertiesToCssFile","to","cssContent","keys","cssLines","push","join","writeFile","writeCustomPropertiesToJsonFile","jsonContent","stringify","json","writeCustomPropertiesToCjsFile","jsContents","jsLines","escapeForJS","js","writeCustomPropertiesToMjsFile","mjsContents","mjsLines","mjs","writeCustomPropertiesToExports","destinations","all","destination","defaultCustomPropertiesToJSON","toJSON","customPropertiesJSON","replace","plugin","importFrom","concat","exportTo","customPropertiesPromise","syncTransform","transformProperties","asyncTransform","canReturnSyncFunction"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEO,SAASA,KAAT,CAAgBC,MAAhB,EAAwB;AAC9B,SAAOC,WAAW,CAACD,MAAD,CAAX,CAAoBD,KAApB,EAAP;AACA;;ACJD,SAASG,cAAT,CAAwBC,iBAAxB,EAA2C;AAC1C,MAAIC,IAAI,GAAGD,iBAAiB,CAACE,QAAlB,GACVF,iBADU,GACUA,iBAAiB,CAACG,MADvC;AAGA,SAAO,6CAA6CC,IAA7C,CAAkDH,IAAI,CAACI,QAAL,EAAlD,CAAP;AACA;;AAED,SAASC,aAAT,CAAuBL,IAAvB,EAA6B;AAC5B,MAAIM,QAAQ,GAAGN,IAAI,CAACO,IAAL,EAAf;AAEA,SAAOC,OAAO,CAACV,cAAc,CAACE,IAAD,CAAd,IACdM,QAAQ,IACRA,QAAQ,CAACG,IAAT,KAAkB,SADlB,IAEA,uDAAuDN,IAAvD,CAA4DG,QAAQ,CAACI,IAArE,CAHa,CAAd;AAIA;;ACVc,SAASC,2BAAT,CAAqCC,IAArC,EAA2CC,IAA3C,EAAiD;AAC/D;AACA,QAAMC,+BAA+B,GAAG,EAAxC;AACA,QAAMC,8BAA8B,GAAG,EAAvC,CAH+D;;AAM/DH,EAAAA,IAAI,CAACI,KAAL,CAAWC,KAAX,GAAmBC,OAAnB,CAA2BlB,IAAI,IAAI;AAClC,UAAMmB,sBAAsB,GAAGC,UAAU,CAACpB,IAAD,CAAV,GAC5Bc,+BAD4B,GAE7BO,UAAU,CAACrB,IAAD,CAAV,GACCe,8BADD,GAEA,IAJF,CADkC;;AAQlC,QAAII,sBAAJ,EAA4B;AAC3BnB,MAAAA,IAAI,CAACgB,KAAL,CAAWC,KAAX,GAAmBC,OAAnB,CAA2BI,IAAI,IAAI;AAClC,YAAIC,YAAY,CAACD,IAAD,CAAZ,IAAsB,CAACxB,cAAc,CAACwB,IAAD,CAAzC,EAAiD;AAAA,gBACxCE,IADwC,GAC/BF,IAD+B,CACxCE,IADwC;;AAIhDL,UAAAA,sBAAsB,CAACK,IAAD,CAAtB,GAA+B7B,KAAK,CAAC2B,IAAI,CAACG,KAAN,CAAL,CAAkBT,KAAjD,CAJgD;;AAOhD,cAAI,CAACH,IAAI,CAACa,QAAV,EAAoB;AACnBJ,YAAAA,IAAI,CAACK,MAAL;AACA;AACD;AACD,OAZD,EAD2B;;AAgB3B,UAAI,CAACd,IAAI,CAACa,QAAN,IAAkBE,aAAa,CAAC5B,IAAD,CAA/B,IAAyC,CAACF,cAAc,CAACE,IAAD,CAA5D,EAAoE;AACnEA,QAAAA,IAAI,CAAC2B,MAAL;AACA;AACD;AACD,GA5BD,EAN+D;;AAqC/D,2BAAYb,+BAAZ,EAAgDC,8BAAhD;AACA;;AAGD,MAAMc,kBAAkB,GAAG,SAA3B;AACA,MAAMC,kBAAkB,GAAG,UAA3B;AACA,MAAMC,oBAAoB,GAAG,iBAA7B;;AAGA,MAAMX,UAAU,GAAGY,IAAI,IAAIA,IAAI,CAACvB,IAAL,KAAc,MAAd,IAAwBoB,kBAAkB,CAAC1B,IAAnB,CAAwB6B,IAAI,CAAC/B,QAA7B,CAAxB,IAAkEgC,MAAM,CAACD,IAAI,CAAChB,KAAN,CAAN,CAAmBkB,MAAhH;;AACA,MAAMb,UAAU,GAAGW,IAAI,IAAIA,IAAI,CAACvB,IAAL,KAAc,MAAd,IAAwBqB,kBAAkB,CAAC3B,IAAnB,CAAwB6B,IAAI,CAAC/B,QAA7B,CAAxB,IAAkEgC,MAAM,CAACD,IAAI,CAAChB,KAAN,CAAN,CAAmBkB,MAAhH;;;AAGA,MAAMX,YAAY,GAAGS,IAAI,IAAIA,IAAI,CAACvB,IAAL,KAAc,MAAd,IAAwBsB,oBAAoB,CAAC5B,IAArB,CAA0B6B,IAAI,CAACR,IAA/B,CAArD;;;AAGA,MAAMI,aAAa,GAAGI,IAAI,IAAIC,MAAM,CAACD,IAAI,CAAChB,KAAN,CAAN,CAAmBkB,MAAnB,KAA8B,CAA5D;;ACnDA;AACA;;SAEeC;;;AAOf;AACA;;;;sDARA,WAA8CC,IAA9C,EAAoD;AACnD,UAAMC,GAAG,SAASC,QAAQ,CAACF,IAAD,CAA1B;AACA,UAAMxB,IAAI,GAAG2B,OAAO,CAAC5C,KAAR,CAAc0C,GAAd,EAAmB;AAAED,MAAAA;AAAF,KAAnB,CAAb;AAEA,WAAOzB,2BAA2B,CAACC,IAAD,EAAO;AAAEc,MAAAA,QAAQ,EAAE;AAAZ,KAAP,CAAlC;AACA;;;;AAKD,SAASc,6BAAT,CAAuCC,MAAvC,EAA+C;AAC9C,QAAMC,gBAAgB,GAAGT,MAAM,CAACU,MAAP,CACxB,EADwB,EAExBV,MAAM,CAACQ,MAAD,CAAN,CAAeC,gBAFS,EAGxBT,MAAM,CAACQ,MAAD,CAAN,CAAe,mBAAf,CAHwB,CAAzB;;AAMA,OAAK,MAAMG,GAAX,IAAkBF,gBAAlB,EAAoC;AACnCA,IAAAA,gBAAgB,CAACE,GAAD,CAAhB,GAAwBjD,KAAK,CAACkD,MAAM,CAACH,gBAAgB,CAACE,GAAD,CAAjB,CAAP,CAAL,CAAqC5B,KAA7D;AACA;;AAED,SAAO0B,gBAAP;AACA;AAED;AACA;;;SAEeI;;;AAMf;AACA;;;;uDAPA,WAA+CV,IAA/C,EAAqD;AACpD,UAAMK,MAAM,SAASM,QAAQ,CAACX,IAAD,CAA7B;AAEA,WAAOI,6BAA6B,CAACC,MAAD,CAApC;AACA;;;;SAKcO;;;AAMf;AACA;;;;qDAPA,WAA6CZ,IAA7C,EAAmD;AAClD,UAAMK,MAAM,SAAS,mEAAOL,IAAP,OAArB;AAEA,WAAOI,6BAA6B,CAACC,MAAD,CAApC;AACA;;;;AAKD,AAAe,SAASQ,8BAAT,CAAwCC,OAAxC,EAAiD;AAC/D,SAAOA,OAAO,CAACC,GAAR,CAAYC,MAAM,IAAI;AAC5B,QAAIA,MAAM,YAAYC,OAAtB,EAA+B;AAC9B,aAAOD,MAAP;AACA,KAFD,MAEO,IAAIA,MAAM,YAAYE,QAAtB,EAAgC;AACtC,aAAOF,MAAM,EAAb;AACA,KAL2B;;;AAQ5B,UAAMvC,IAAI,GAAGuC,MAAM,KAAKnB,MAAM,CAACmB,MAAD,CAAjB,GAA4BA,MAA5B,GAAqC;AAAEhB,MAAAA,IAAI,EAAES,MAAM,CAACO,MAAD;AAAd,KAAlD,CAR4B;;AAW5B,QAAIvC,IAAI,CAAC6B,gBAAL,IAAyB7B,IAAI,CAAC,mBAAD,CAAjC,EAAwD;AACvD,aAAOA,IAAP;AACA,KAb2B;;;AAgB5B,UAAMuB,IAAI,GAAGmB,IAAI,CAACC,OAAL,CAAaX,MAAM,CAAChC,IAAI,CAACuB,IAAL,IAAa,EAAd,CAAnB,CAAb,CAhB4B;;AAmB5B,UAAM3B,IAAI,GAAG,CAACI,IAAI,CAACJ,IAAL,IAAa8C,IAAI,CAACE,OAAL,CAAarB,IAAb,EAAmBnB,KAAnB,CAAyB,CAAzB,CAAd,EAA2CyC,WAA3C,EAAb;AAEA,WAAO;AAAEjD,MAAAA,IAAF;AAAQ2B,MAAAA;AAAR,KAAP;AACA,GAtBM,EAsBJuB,MAtBI;AAAA,iCAsBG,WAAOjB,gBAAP,EAAyBU,MAAzB,EAAoC;AAAA,kCAChBA,MADgB;AAAA,YACrC3C,IADqC,iBACrCA,IADqC;AAAA,YAC/B2B,IAD+B,iBAC/BA,IAD+B;;AAG7C,UAAI3B,IAAI,KAAK,KAAb,EAAoB;AACnB,eAAOwB,MAAM,CAACU,MAAP,OAAoBD,gBAApB,QAA4CP,8BAA8B,CAACC,IAAD,CAA1E,CAAP;AACA;;AAED,UAAI3B,IAAI,KAAK,IAAb,EAAmB;AAClB,eAAOwB,MAAM,CAACU,MAAP,OAAoBD,gBAApB,QAA4CM,6BAA6B,CAACZ,IAAD,CAAzE,CAAP;AACA;;AAED,UAAI3B,IAAI,KAAK,MAAb,EAAqB;AACpB,eAAOwB,MAAM,CAACU,MAAP,OAAoBD,gBAApB,QAA4CI,+BAA+B,CAACV,IAAD,CAA3E,CAAP;AACA;;AAED,aAAOH,MAAM,CAACU,MAAP,OAAoBD,gBAApB,QAA4CF,6BAA6B,OAAOY,MAAP,CAAzE,CAAP;AACA,KAtCM;;AAAA;AAAA;AAAA;AAAA,OAsCJ,EAtCI,CAAP;AAuCA;AAED;AACA;;AAEA,MAAMd,QAAQ,GAAGF,IAAI,IAAI,IAAIiB,OAAJ,CAAY,CAACG,OAAD,EAAUI,MAAV,KAAqB;AACzDC,EAAAA,EAAE,CAACvB,QAAH,CAAYF,IAAZ,EAAkB,MAAlB,EAA0B,CAAC0B,KAAD,EAAQC,MAAR,KAAmB;AAC5C,QAAID,KAAJ,EAAW;AACVF,MAAAA,MAAM,CAACE,KAAD,CAAN;AACA,KAFD,MAEO;AACNN,MAAAA,OAAO,CAACO,MAAD,CAAP;AACA;AACD,GAND;AAOA,CARwB,CAAzB;;AAUA,MAAMhB,QAAQ;AAAA,gCAAG,WAAMX,IAAN;AAAA,WAAc4B,IAAI,CAACrE,KAAL,OAAiB2C,QAAQ,CAACF,IAAD,CAAzB,CAAd;AAAA,GAAH;;AAAA,kBAARW,QAAQ;AAAA;AAAA;AAAA,GAAd;;AC7Ge,SAASkB,iBAAT,CAA2BrD,IAA3B,EAAiC8B,gBAAjC,EAAmD;AACjE,MAAI9B,IAAI,CAACI,KAAL,IAAcJ,IAAI,CAACI,KAAL,CAAWkB,MAA7B,EAAqC;AACpCtB,IAAAA,IAAI,CAACI,KAAL,CAAWC,KAAX,GAAmBC,OAAnB,CAA2BgD,KAAK,IAAI;AACnC,UAAIC,aAAa,CAACD,KAAD,CAAjB,EAA0B;AACzB;AADyB,mCAEmBA,KAAK,CAAClD,KAAN,CAAYC,KAAZ,CAAkB,CAAlB,EAAqB,CAAC,CAAtB,CAFnB;AAAA,cAElBmD,YAFkB;AAAA,cAEJC,KAFI;AAAA,cAEMC,SAFN;;AAAA,cAGVC,IAHU,GAGDH,YAHC,CAGjB3C,KAHiB;;AAKzB,YAAI8C,IAAI,IAAItC,MAAM,CAACS,gBAAD,CAAlB,EAAsC;AACrC;AACA,gBAAM1B,KAAK,GAAGwD,8BAA8B,CAAC9B,gBAAgB,CAAC6B,IAAD,CAAjB,EAAyBL,KAAK,CAACO,IAAN,CAAWC,MAApC,CAA5C;AAEAR,UAAAA,KAAK,CAACS,WAAN,CAAkB,GAAG3D,KAArB;AAEA4D,UAAAA,mBAAmB,CAAC;AAAE5D,YAAAA;AAAF,WAAD,EAAY0B,gBAAZ,EAA8B6B,IAA9B,CAAnB;AACA,SAPD,MAOO,IAAID,SAAS,CAACpC,MAAd,EAAsB;AAC5B;AACA,gBAAM2C,KAAK,GAAGjE,IAAI,CAACI,KAAL,CAAW8D,OAAX,CAAmBZ,KAAnB,CAAd;;AAEA,cAAIW,KAAK,KAAK,CAAC,CAAf,EAAkB;AACjBjE,YAAAA,IAAI,CAACI,KAAL,CAAW+D,MAAX,CAAkBF,KAAlB,EAAyB,CAAzB,EAA4B,GAAGL,8BAA8B,CAACF,SAAD,EAAYJ,KAAK,CAACO,IAAN,CAAWC,MAAvB,CAA7D;AACA;;AAEDT,UAAAA,iBAAiB,CAACrD,IAAD,EAAO8B,gBAAP,CAAjB;AACA;AACD,OAtBD,MAsBO;AACNuB,QAAAA,iBAAiB,CAACC,KAAD,EAAQxB,gBAAR,CAAjB;AACA;AACD,KA1BD;AA2BA;;AAED,SAAO9B,IAAP;AACA;;AAGD,SAASgE,mBAAT,CAA6BhE,IAA7B,EAAmC8B,gBAAnC,EAAqDsC,eAArD,EAAsE;AACrE,QAAMC,oBAAoB,GAAGhD,MAAM,CAACU,MAAP,CAAc,EAAd,EAAkBD,gBAAlB,CAA7B;AAEA,SAAOuC,oBAAoB,CAACD,eAAD,CAA3B;AAEA,SAAOf,iBAAiB,CAACrD,IAAD,EAAOqE,oBAAP,CAAxB;AACA;;;AAGD,MAAMC,SAAS,GAAG,QAAlB;;AAGA,MAAMf,aAAa,GAAGnC,IAAI,IAAIA,IAAI,CAACvB,IAAL,KAAc,MAAd,IAAwByE,SAAS,CAAC/E,IAAV,CAAe6B,IAAI,CAACP,KAApB,CAAxB,IAAsDQ,MAAM,CAACD,IAAI,CAAChB,KAAN,CAAN,CAAmBkB,MAAnB,GAA4B,CAAhH;;;AAGA,MAAMsC,8BAA8B,GAAG,CAACW,KAAD,EAAQC,aAAR,KAA0B;AAChE,QAAMC,WAAW,GAAGC,aAAa,CAACH,KAAD,EAAQ,IAAR,CAAjC;;AAEA,MAAIE,WAAW,CAAC,CAAD,CAAf,EAAoB;AACnBA,IAAAA,WAAW,CAAC,CAAD,CAAX,CAAeZ,IAAf,CAAoBC,MAApB,GAA6BU,aAA7B;AACA;;AAED,SAAOC,WAAP;AACA,CARD;;;AAWA,MAAMC,aAAa,GAAG,CAACH,KAAD,EAAQjF,MAAR,KAAmBiF,KAAK,CAAChC,GAAN,CAAUnB,IAAI,IAAIuD,YAAY,CAACvD,IAAD,EAAO9B,MAAP,CAA9B,CAAzC;;;AAGA,MAAMqF,YAAY,GAAG,CAACvD,IAAD,EAAO9B,MAAP,KAAkB;AACtC,QAAMsF,SAAS,GAAG,IAAIxD,IAAI,CAACyD,WAAT,CAAqBzD,IAArB,CAAlB;;AAEA,OAAK,MAAMY,GAAX,IAAkBZ,IAAlB,EAAwB;AACvB,QAAIY,GAAG,KAAK,QAAZ,EAAsB;AACrB4C,MAAAA,SAAS,CAACtF,MAAV,GAAmBA,MAAnB;AACA,KAFD,MAEO,IAAI+B,MAAM,CAACD,IAAI,CAACY,GAAD,CAAL,CAAN,CAAkB6C,WAAlB,KAAkCC,KAAtC,EAA6C;AACnDF,MAAAA,SAAS,CAAC5C,GAAD,CAAT,GAAiB0C,aAAa,CAACtD,IAAI,CAAChB,KAAN,EAAawE,SAAb,CAA9B;AACA,KAFM,MAEA,IAAIvD,MAAM,CAACD,IAAI,CAACY,GAAD,CAAL,CAAN,CAAkB6C,WAAlB,KAAkCxD,MAAtC,EAA8C;AACpDuD,MAAAA,SAAS,CAAC5C,GAAD,CAAT,GAAiBX,MAAM,CAACU,MAAP,CAAc,EAAd,EAAkBX,IAAI,CAACY,GAAD,CAAtB,CAAjB;AACA;AACD;;AAED,SAAO4C,SAAP;AACA,CAdD;;AC3DA,2BAAe,CAAC5E,IAAD,EAAO8B,gBAAP,EAAyB7B,IAAzB,KAAkC;AAChD;AACAD,EAAAA,IAAI,CAAC+E,SAAL,CAAerE,IAAI,IAAI;AACtB,QAAIsE,mBAAmB,CAACtE,IAAD,CAAnB,IAA6B,CAACjB,aAAa,CAACiB,IAAD,CAA/C,EAAuD;AACtD,YAAMuE,aAAa,GAAGvE,IAAI,CAACG,KAA3B;AACA,YAAMqE,QAAQ,GAAGnG,KAAK,CAACkG,aAAD,CAAtB;AACA,YAAMpE,KAAK,GAAGoB,MAAM,CAACoB,iBAAiB,CAAC6B,QAAD,EAAWpD,gBAAX,CAAlB,CAApB,CAHsD;;AAMtD,UAAIjB,KAAK,KAAKoE,aAAd,EAA6B;AAC5B,YAAIhF,IAAI,CAACa,QAAT,EAAmB;AAClBJ,UAAAA,IAAI,CAACyE,WAAL,CAAiB;AAAEtE,YAAAA;AAAF,WAAjB;AACA,SAFD,MAEO;AACNH,UAAAA,IAAI,CAACG,KAAL,GAAaA,KAAb;AACA;AACD;AACD;AACD,GAfD;AAgBA,CAlBD;;AAqBA,MAAMM,sBAAoB,GAAG,iBAA7B;;AAGA,MAAMiE,sBAAsB,GAAG,0BAA/B;;AAGA,MAAMJ,mBAAmB,GAAGtE,IAAI,IAAI,CAACS,sBAAoB,CAAC5B,IAArB,CAA0BmB,IAAI,CAACE,IAA/B,CAAD,IAAyCwE,sBAAsB,CAAC7F,IAAvB,CAA4BmB,IAAI,CAACG,KAAjC,CAA7E;;AC7BA;AACA;;SAEewE;;;AAWf;AACA;;;;sDAZA,WAA8CC,EAA9C,EAAkDxD,gBAAlD,EAAoE;AACnE,UAAMyD,UAAU,GAAGlE,MAAM,CAACmE,IAAP,CAAY1D,gBAAZ,EAA8BiB,MAA9B,CAAqC,CAAC0C,QAAD,EAAW9B,IAAX,KAAoB;AAC3E8B,MAAAA,QAAQ,CAACC,IAAT,CAAe,KAAI/B,IAAK,KAAI7B,gBAAgB,CAAC6B,IAAD,CAAO,GAAnD;AAEA,aAAO8B,QAAP;AACA,KAJkB,EAIhB,EAJgB,EAIZE,IAJY,CAIP,IAJO,CAAnB;AAKA,UAAMlE,GAAG,GAAI,YAAW8D,UAAW,OAAnC;AAEA,UAAMK,SAAS,CAACN,EAAD,EAAK7D,GAAL,CAAf;AACA;;;;SAKcoE;;;AASf;AACA;;;;uDAVA,WAA+CP,EAA/C,EAAmDxD,gBAAnD,EAAqE;AACpE,UAAMgE,WAAW,GAAG1C,IAAI,CAAC2C,SAAL,CAAe;AAClC,2BAAqBjE;AADa,KAAf,EAEjB,IAFiB,EAEX,IAFW,CAApB;AAGA,UAAMkE,IAAI,GAAI,GAAEF,WAAY,IAA5B;AAEA,UAAMF,SAAS,CAACN,EAAD,EAAKU,IAAL,CAAf;AACA;;;;SAKcC;;;AAWf;AACA;;;;sDAZA,WAA8CX,EAA9C,EAAkDxD,gBAAlD,EAAoE;AACnE,UAAMoE,UAAU,GAAG7E,MAAM,CAACmE,IAAP,CAAY1D,gBAAZ,EAA8BiB,MAA9B,CAAqC,CAACoD,OAAD,EAAUxC,IAAV,KAAmB;AAC1EwC,MAAAA,OAAO,CAACT,IAAR,CAAc,QAAOU,WAAW,CAACzC,IAAD,CAAO,OAAMyC,WAAW,CAACtE,gBAAgB,CAAC6B,IAAD,CAAjB,CAAyB,GAAjF;AAEA,aAAOwC,OAAP;AACA,KAJkB,EAIhB,EAJgB,EAIZR,IAJY,CAIP,KAJO,CAAnB;AAKA,UAAMU,EAAE,GAAI,8CAA6CH,UAAW,aAApE;AAEA,UAAMN,SAAS,CAACN,EAAD,EAAKe,EAAL,CAAf;AACA;;;;SAKcC;;;AAWf;AACA;;;;sDAZA,WAA8ChB,EAA9C,EAAkDxD,gBAAlD,EAAoE;AACnE,UAAMyE,WAAW,GAAGlF,MAAM,CAACmE,IAAP,CAAY1D,gBAAZ,EAA8BiB,MAA9B,CAAqC,CAACyD,QAAD,EAAW7C,IAAX,KAAoB;AAC5E6C,MAAAA,QAAQ,CAACd,IAAT,CAAe,MAAKU,WAAW,CAACzC,IAAD,CAAO,OAAMyC,WAAW,CAACtE,gBAAgB,CAAC6B,IAAD,CAAjB,CAAyB,GAAhF;AAEA,aAAO6C,QAAP;AACA,KAJmB,EAIjB,EAJiB,EAIbb,IAJa,CAIR,KAJQ,CAApB;AAKA,UAAMc,GAAG,GAAI,sCAAqCF,WAAY,QAA9D;AAEA,UAAMX,SAAS,CAACN,EAAD,EAAKmB,GAAL,CAAf;AACA;;;;AAKD,AAAe,SAASC,8BAAT,CAAwC5E,gBAAxC,EAA0D6E,YAA1D,EAAwE;AACtF,SAAOlE,OAAO,CAACmE,GAAR,CAAYD,YAAY,CAACpE,GAAb;AAAA,iCAAiB,WAAMsE,WAAN,EAAqB;AACxD,UAAIA,WAAW,YAAYnE,QAA3B,EAAqC;AACpC,cAAMmE,WAAW,CAACC,6BAA6B,CAAChF,gBAAD,CAA9B,CAAjB;AACA,OAFD,MAEO;AACN;AACA,cAAM7B,IAAI,GAAG4G,WAAW,KAAKxF,MAAM,CAACwF,WAAD,CAAtB,GAAsCA,WAAtC,GAAoD;AAAEvB,UAAAA,EAAE,EAAErD,MAAM,CAAC4E,WAAD;AAAZ,SAAjE,CAFM;;AAKN,cAAME,MAAM,GAAG9G,IAAI,CAAC8G,MAAL,IAAeD,6BAA9B;;AAEA,YAAI,sBAAsB7G,IAA1B,EAAgC;AAC/B;AACAA,UAAAA,IAAI,CAAC6B,gBAAL,GAAwBiF,MAAM,CAACjF,gBAAD,CAA9B;AACA,SAHD,MAGO,IAAI,uBAAuB7B,IAA3B,EAAiC;AACvC;AACAA,UAAAA,IAAI,CAAC,mBAAD,CAAJ,GAA4B8G,MAAM,CAACjF,gBAAD,CAAlC;AACA,SAHM,MAGA;AACN;AACA,gBAAMwD,EAAE,GAAGrD,MAAM,CAAChC,IAAI,CAACqF,EAAL,IAAW,EAAZ,CAAjB,CAFM;;AAKN,gBAAMzF,IAAI,GAAG,CAACI,IAAI,CAACJ,IAAL,IAAa8C,IAAI,CAACE,OAAL,CAAa5C,IAAI,CAACqF,EAAlB,EAAsBjF,KAAtB,CAA4B,CAA5B,CAAd,EAA8CyC,WAA9C,EAAb,CALM;;AAQN,gBAAMkE,oBAAoB,GAAGD,MAAM,CAACjF,gBAAD,CAAnC;;AAEA,cAAIjC,IAAI,KAAK,KAAb,EAAoB;AACnB,kBAAMwF,8BAA8B,CAACC,EAAD,EAAK0B,oBAAL,CAApC;AACA;;AAED,cAAInH,IAAI,KAAK,IAAb,EAAmB;AAClB,kBAAMoG,8BAA8B,CAACX,EAAD,EAAK0B,oBAAL,CAApC;AACA;;AAED,cAAInH,IAAI,KAAK,MAAb,EAAqB;AACpB,kBAAMgG,+BAA+B,CAACP,EAAD,EAAK0B,oBAAL,CAArC;AACA;;AAED,cAAInH,IAAI,KAAK,KAAb,EAAoB;AACnB,kBAAMyG,8BAA8B,CAAChB,EAAD,EAAK0B,oBAAL,CAApC;AACA;AACD;AACD;AACD,KA3CkB;;AAAA;AAAA;AAAA;AAAA,MAAZ,CAAP;AA4CA;AAED;AACA;;AAEA,MAAMF,6BAA6B,GAAGhF,gBAAgB,IAAI;AACzD,SAAOT,MAAM,CAACmE,IAAP,CAAY1D,gBAAZ,EAA8BiB,MAA9B,CAAqC,CAACiE,oBAAD,EAAuBhF,GAAvB,KAA+B;AAC1EgF,IAAAA,oBAAoB,CAAChF,GAAD,CAApB,GAA4BC,MAAM,CAACH,gBAAgB,CAACE,GAAD,CAAjB,CAAlC;AAEA,WAAOgF,oBAAP;AACA,GAJM,EAIJ,EAJI,CAAP;AAKA,CAND;;AAQA,MAAMpB,SAAS,GAAG,CAACN,EAAD,EAAKxF,IAAL,KAAc,IAAI2C,OAAJ,CAAY,CAACG,OAAD,EAAUI,MAAV,KAAqB;AAChEC,EAAAA,EAAE,CAAC2C,SAAH,CAAaN,EAAb,EAAiBxF,IAAjB,EAAuBoD,KAAK,IAAI;AAC/B,QAAIA,KAAJ,EAAW;AACVF,MAAAA,MAAM,CAACE,KAAD,CAAN;AACA,KAFD,MAEO;AACNN,MAAAA,OAAO;AACP;AACD,GAND;AAOA,CAR+B,CAAhC;;AAUA,MAAMwD,WAAW,GAAGpH,MAAM,IAAIA,MAAM,CAACiI,OAAP,CAAe,iBAAf,EAAkC,QAAlC,EAA4CA,OAA5C,CAAoD,KAApD,EAA2D,KAA3D,EAAkEA,OAAlE,CAA0E,KAA1E,EAAiF,KAAjF,CAA9B;;AC1HA,YAAetF,OAAO,CAACuF,MAAR,CAAe,2BAAf,EAA4CjH,IAAI,IAAI;AAClE;AACA,QAAMa,QAAQ,GAAG,cAAcO,MAAM,CAACpB,IAAD,CAApB,GAA6BL,OAAO,CAACK,IAAI,CAACa,QAAN,CAApC,GAAsD,IAAvE,CAFkE;;AAKlE,QAAMqG,UAAU,GAAG,GAAGC,MAAH,CAAU/F,MAAM,CAACpB,IAAD,CAAN,CAAakH,UAAb,IAA2B,EAArC,CAAnB,CALkE;;AAQlE,QAAME,QAAQ,GAAG,GAAGD,MAAH,CAAU/F,MAAM,CAACpB,IAAD,CAAN,CAAaoH,QAAb,IAAyB,EAAnC,CAAjB,CARkE;;AAWlE,QAAMC,uBAAuB,GAAGjF,8BAA8B,CAAC8E,UAAD,CAA9D,CAXkE;;AAclE,QAAMI,aAAa,GAAGvH,IAAI,IAAI;AAC7B,UAAM8B,gBAAgB,GAAG/B,2BAA2B,CAACC,IAAD,EAAO;AAAEc,MAAAA;AAAF,KAAP,CAApD;AAEA0G,IAAAA,mBAAmB,CAACxH,IAAD,EAAO8B,gBAAP,EAAyB;AAAEhB,MAAAA;AAAF,KAAzB,CAAnB;AACA,GAJD,CAdkE;;;AAqBlE,QAAM2G,cAAc;AAAA,iCAAG,WAAMzH,IAAN,EAAc;AACpC,YAAM8B,gBAAgB,GAAGT,MAAM,CAACU,MAAP,CACxB,EADwB,QAElBuF,uBAFkB,EAGxBvH,2BAA2B,CAACC,IAAD,EAAO;AAAEc,QAAAA;AAAF,OAAP,CAHH,CAAzB;AAMA,YAAM4F,8BAA8B,CAAC5E,gBAAD,EAAmBuF,QAAnB,CAApC;AAEAG,MAAAA,mBAAmB,CAACxH,IAAD,EAAO8B,gBAAP,EAAyB;AAAEhB,QAAAA;AAAF,OAAzB,CAAnB;AACA,KAVmB;;AAAA,oBAAd2G,cAAc;AAAA;AAAA;AAAA,KAApB,CArBkE;;;AAkClE,QAAMC,qBAAqB,GAAGP,UAAU,CAAC7F,MAAX,KAAsB,CAAtB,IAA2B+F,QAAQ,CAAC/F,MAAT,KAAoB,CAA7E;AAEA,SAAOoG,qBAAqB,GAAGH,aAAH,GAAmBE,cAA/C;AACA,CArCc,CAAf;;;;"}